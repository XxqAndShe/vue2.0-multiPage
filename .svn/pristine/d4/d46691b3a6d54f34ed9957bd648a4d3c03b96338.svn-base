<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Document</title>
  <link rel="stylesheet" href="/static/css/normalize.min.css">
  <link rel="stylesheet" href="//at.alicdn.com/t/font_580199_qdrw4brplclyp66r.css">
  <link rel="stylesheet" href="/static/css/all.css">
  <script src="/static/js/lib/es6-promise.auto.min.js"></script>
  <script src="/static/js/lib/require.min.js"></script>
  <script data-path="../../" src="/static/config.js"></script>
</head>
<body>
  <div id="app" v-clock>
    <layout-table>
      <div slot="header-left-handler">
        <el-button :loading="orderAccepting" :disabled="loading" @click="doBatchOrderAccept" type="primary" icon="el-icon-tickets">批量接单</el-button>
        <el-button :loading="orderCompleteding" :disabled="loading" @click="doBatchOrderCompleted" type="success" icon="el-icon-check">批量完成</el-button>
        <el-button :loading="orderDenieding" :disabled="loading" @click="doBatchOrderDenied" type="danger" icon="el-icon-close">批量拒单</el-button>
      </div>
      <div slot="header-right-filters">
        <el-date-picker
          style="width: 220px;margin-bottom: 10px;"
          v-model="filterTime"
          type="daterange"
          align="left"
          :editable="false"
          @change="timeChange"
          placeholder="选择日期范围"
          :picker-options="pickerOptions">
        </el-date-picker>
        <el-select style="width: 220px;margin-bottom: 10px;" placeholder="选择订单状态">
          <el-option label="待接单" value="待接单"></el-option>
          <el-option label="待完成" value="待完成"></el-option>
        </el-select>
        <el-input style="width: 220px;" placeholder="操作人"></el-input>
      </div>
      <div slot="header-right-handler">
        <el-button type="primary" icon="el-icon-search">查询</el-button>
      </div>

      <!-- <div slot="main-settings">
        表格列设置区
      </div> -->
    <!-- 订单号，业务名称，下单时间， 支付方式， 支付金额， 门店， 订单状态 -->
      <el-table
        slot="main"
        ref="table"
        @selection-change="selectionChange"
        @row-dblclick="rowDbClick"
        :loading="loading"
        :data="orderList"
        :highlight-current-row="true"
        size="small"
        border
        tooltip-effect="dark"
        height="100%"
        style="width: 100%;height: 100%;">
        <el-table-column
          fixed
          type="selection">
        </el-table-column>

        <el-table-column
          show-overflow-tooltip
          width="230"
          prop="code"
          label="订单号">
          <!-- <template slot-scope="scope">{{ scope.row.date }}</template> -->
        </el-table-column>

        <el-table-column
          show-overflow-tooltip
          prop="biz.name"
          label="业务名称">
        </el-table-column>

        <el-table-column
          show-overflow-tooltip
          prop="orderTime"
          label="下单时间">
        </el-table-column>

        <el-table-column
          show-overflow-tooltip
          label="支付方式">
          <template slot-scope="scope">{{ scope.row.payType === 'Before' ? '预付' : '后付' }}</template>
        </el-table-column>

        <el-table-column
          show-overflow-tooltip
          prop="realPay"
          label="支付金额">
        </el-table-column>

        <el-table-column
          show-overflow-tooltip
          prop="shopName"
          label="门店">
        </el-table-column>

        <el-table-column
          show-overflow-tooltip
          prop="status"
          label="订单状态">
          <template slot-scope="scope">
            <el-tag v-if="orderAcceptStatus.indexOf(scope.row.status) > -1" size="mini" type="warning">待接单</el-tag>
            <el-tag v-else-if="orderCompletedStatus.indexOf(scope.row.status) > -1" size="mini" type="success">待完成</el-tag>
            <span v-else></span>  
          </template>
        </el-table-column>

        <el-table-column
          show-overflow-tooltip
          width="220"
          label="操作"
          fixed="right">
          <template slot-scope="scope">
            <template v-if="orderAcceptStatus.indexOf(scope.row.status) > -1">
              <el-button @click.native="doOrderAccept(scope.row)" type="primary" size="mini">接单</el-button>
              <el-button @click.native="doOrderDenied(scope.row)" type="danger" size="mini">拒单</el-button>
            </template>
            <template v-if="orderCompletedStatus.indexOf(scope.row.status) > -1">
              <el-button @click.native="doOrderCompleted(scope.row)" type="success" size="mini">完成</el-button>
            </template>
            <el-button type="info" size="mini">详情</el-button>
          </template>
        </el-table-column>
      </el-table>

      <div slot="footer">
        <el-pagination
          background
          border
          :page-sizes="[10, 20, 30, 40]"
          :page-size="listQuery.len"
          :total="total"
          :current-page="listQuery.p + 1"
          @size-change="sizeChange"
          @current-change="onCurrentPage"
          layout="total, sizes, prev, pager, next, jumper">
        </el-pagination>
      </div>
    </layout-table>
  </div>

  <script>
    require(['vue', 'ELEMENT', 'util/index', 'components/layout-table'], function (Vue, ELEMENT, u, LayoutTable) {
      Vue.use(ELEMENT)
      
      // 接单状态 CustPosted
      const orderAcceptStatus = ['CustPosted']
      // 完成服务状态 ShopAccepted
      const orderCompletedStatus = ['ShopAccepted']
      new Vue({
        el: '#app',
        components: {
          LayoutTable: LayoutTable
        },
        data: function () {
          return {
            ajaxCount: 0,
            errorCount: 0,
            loading: false,
            orderAccepting: false, // 接单请求中
            orderCompleteding: false, // 完成订单请求中
            orderDenieding: false, // 拒绝接单请求中
            orderAcceptStatus,
            orderCompletedStatus,
            orderList: [],
            selects: [],
            listQuery: {
              p: 0,
              len: 20,
              sort: '-orderTime'
            },
            total: 0,
            filterTime: '',
            pickerOptions: {
              shortcuts: [{
                text: '最近一周',
                onClick (picker) {
                  const end = new Date()
                  const start = new Date()
                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 7)
                  picker.$emit('pick', [start, end])
                }
              }, {
                text: '最近一个月',
                onClick (picker) {
                  const end = new Date()
                  const start = new Date()
                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 30)
                  picker.$emit('pick', [start, end])
                }
              }, {
                text: '最近三个月',
                onClick (picker) {
                  const end = new Date()
                  const start = new Date()
                  start.setTime(start.getTime() - 3600 * 1000 * 24 * 90)
                  picker.$emit('pick', [start, end])
                }
              }]
            }
          }
        },
        created: function () {
          // utils的一些初始化动作
          u.init(this);
          this.getOrderList();
        },
        mounted: function () {
          var _this = this
          window.addEventListener('message', function (e) {
            var domain = window.location.origin
            var sourceDomain = e.origin || e.originalEvent.origin
            if (domain === sourceDomain) {
              if (e.data && e.data === 'Order') {
                // console.log('刷新了')
                _this.getOrderList()
              }
            }
          }, false)
        },
        methods: {
          // 获取订单列表
          getOrderList: function () {
            this.loading = true
            u.get('/admin/order/list', this.listQuery, function (data) {
              if (data.success) {
                this.orderList = data.data.content;
                this.total = data.data.totalElements;
                console.log(data)
              } else {
                u.$message.error(data.message);
              }
            }).always(function () {
              this.loading = false
            })
          },
          // 接单
          orderAccept: function (row, num) {
            u.post('/admin/order/accept', { code: row.code }).always(function (data) {
              if (data && data.success) {
                // 操作成功
                this.$refs.table.toggleRowSelection(row, false);
              } else {
                // 失败的次数
                this.errorCount++
              }
              // 记录处理完的请求
              this.ajaxCount++;
              if (this.ajaxCount === num) {
                // 完成所有请求后，重置状态，刷新表格
                if (this.errorCount === 0) {
                  u.$message.success('操作成功');
                } else {
                  u.$message.error('操作完成，其中' + this.errorCount + '笔订单处理失败');
                }
                this.orderAccepting = false;
                this.loading = false;
                this.ajaxCount = 0;
                this.errorCount = 0;
                this.getOrderList()
              }
            })
          },
          // 接单
          doOrderAccept: function (row) {
            this.orderAccepting = true
            this.loading = true
            this.orderAccept(row, 1)
          },
          // 批量接单
          doBatchOrderAccept: function () {
            var len = this.selects.length;
            if (len === 0) {
              return false
            }
            this.orderAccepting = true;
            this.loading = true;
            this.selects.forEach(function (row) {
              this.orderAccept(row, len)
            }, this);
          },
          // 完成订单
          orderCompleted: function (row, num) {
            u.post('/admin/order/completed', { code: row.code }).always(function (data) {
              if (data && data.success) {
                // 操作成功
                this.$refs.table.toggleRowSelection(row, false);
              } else {
                // 失败的次数
                this.errorCount++
              }
              // 记录处理完的请求
              this.ajaxCount++;
              if (this.ajaxCount === num) {
                // 完成所有请求后，重置状态，刷新表格
                if (this.errorCount === 0) {
                  u.$message.success('操作成功');
                } else {
                  u.$message.error('操作完成，其中' + this.errorCount + '笔订单处理失败');
                }
                this.orderCompleteding = false;
                this.loading = false;
                this.ajaxCount = 0;
                this.errorCount = 0;
                this.getOrderList()
              }
            })
          },
          // 完成订单
          doOrderCompleted: function (row) {
            this.orderCompleteding = true
            this.loading = true
            this.orderCompleted(row, 1)
          },
          // 批量完成订单
          doBatchOrderCompleted: function () {
            var len = this.selects.length;
            if (len === 0) {
              return false
            }
            this.orderCompleteding = true;
            this.loading = true;
            this.selects.forEach(function (row) {
              this.orderCompleted(row, len)
            }, this);
          },
          // 拒单
          orderDenied: function (row, num) {
            u.post('/admin/order/denied', { code: row.code }).always(function (data) {
              if (data && data.success) {
                // 操作成功
                this.$refs.table.toggleRowSelection(row, false);
              } else {
                // 失败的次数
                this.errorCount++
              }
              // 记录处理完的请求
              this.ajaxCount++;
              if (this.ajaxCount === num) {
                // 完成所有请求后，重置状态，刷新表格
                if (this.errorCount === 0) {
                  u.$message.success('操作成功');
                } else {
                  u.$message.error('操作完成，其中' + this.errorCount + '笔订单处理失败');
                }
                this.orderDenieding = false;
                this.loading = false;
                this.ajaxCount = 0;
                this.errorCount = 0;
                this.getOrderList()
              }
            })
          },
          // 拒单
          doOrderDenied: function (row) {
            this.orderDenieding = true
            this.loading = true
            this.orderDenied(row, 1)
          },
          // 批量拒单
          doBatchOrderDenied: function () {
            var len = this.selects.length;
            if (len === 0) {
              return false
            }
            this.orderDenieding = true;
            this.loading = true;
            this.selects.forEach(function (row) {
              this.orderDenied(row, len)
            }, this);
          },
          // 选项改变
          selectionChange: function (selects) {
            this.selects = selects
          },
          // 单击某一行选中
          rowDbClick: function (row) {
            this.$refs.table.toggleRowSelection(row, this.selects.indexOf(row) === -1)
          },
          sizeChange: function (size) {
            this.listQuery.len = size
          },
          onCurrentPage: function (page) {
            this.listQuery.p = page - 1
          },
          timeChange (vl) {
            console.log(vl)
          }
        },
        watch: {
          listQuery: {
            handler: function (newVl) {
              this.getOrderList()
            },
            deep: true
          }
        }
      })
    })
  </script>
</body>
</html>